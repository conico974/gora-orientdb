/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.phinence.spark.storage;  
@SuppressWarnings("all")
public class Ohlc extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent, org.apache.gora.orientdb.storage.test.Vertex {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Ohlc\",\"namespace\":\"com.phinence.spark.storage\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AA==\"},{\"name\":\"Open\",\"type\":\"float\",\"default\":0.0},{\"name\":\"High\",\"type\":\"float\",\"default\":0.0},{\"name\":\"Low\",\"type\":\"float\",\"default\":0.0},{\"name\":\"Close\",\"type\":\"float\",\"default\":0.0},{\"name\":\"Volume\",\"type\":\"long\",\"default\":0}]}");

  public int getFieldsCount(){
      return 2;
  }
  
    private Object key;
  
    @Override
    public Object getKey() {
        return key;
    }

    @Override
    public void setKey(Object obj) {
        key = obj;
    }
  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    OPEN(1, "Open"),
    HIGH(2, "High"),
    LOW(3, "Low"),
    CLOSE(4, "Close"),
    VOLUME(5, "Volume"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "Open",
  "High",
  "Low",
  "Close",
  "Volume",
  };

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[1]);
  private float Open;
  private float High;
  private float Low;
  private float Close;
  private long Volume;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return Open;
    case 2: return High;
    case 3: return Low;
    case 4: return Close;
    case 5: return Volume;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: Open = (java.lang.Float)(value); break;
    case 2: High = (java.lang.Float)(value); break;
    case 3: Low = (java.lang.Float)(value); break;
    case 4: Close = (java.lang.Float)(value); break;
    case 5: Volume = (java.lang.Long)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Open' field.
   */
  public java.lang.Float getOpen() {
    return Open;
  }

  /**
   * Sets the value of the 'Open' field.
   * @param value the value to set.
   */
  public void setOpen(java.lang.Float value) {
    this.Open = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'Open' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOpenDirty(java.lang.Float value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'High' field.
   */
  public java.lang.Float getHigh() {
    return High;
  }

  /**
   * Sets the value of the 'High' field.
   * @param value the value to set.
   */
  public void setHigh(java.lang.Float value) {
    this.High = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'High' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHighDirty(java.lang.Float value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'Low' field.
   */
  public java.lang.Float getLow() {
    return Low;
  }

  /**
   * Sets the value of the 'Low' field.
   * @param value the value to set.
   */
  public void setLow(java.lang.Float value) {
    this.Low = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'Low' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLowDirty(java.lang.Float value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'Close' field.
   */
  public java.lang.Float getClose() {
    return Close;
  }

  /**
   * Sets the value of the 'Close' field.
   * @param value the value to set.
   */
  public void setClose(java.lang.Float value) {
    this.Close = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'Close' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCloseDirty(java.lang.Float value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'Volume' field.
   */
  public java.lang.Long getVolume() {
    return Volume;
  }

  /**
   * Sets the value of the 'Volume' field.
   * @param value the value to set.
   */
  public void setVolume(java.lang.Long value) {
    this.Volume = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'Volume' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isVolumeDirty(java.lang.Long value) {
    return isDirty(5);
  }

  /** Creates a new Ohlc RecordBuilder */
  public static com.phinence.spark.storage.Ohlc.Builder newBuilder() {
    return new com.phinence.spark.storage.Ohlc.Builder();
  }
  
  /** Creates a new Ohlc RecordBuilder by copying an existing Builder */
  public static com.phinence.spark.storage.Ohlc.Builder newBuilder(com.phinence.spark.storage.Ohlc.Builder other) {
    return new com.phinence.spark.storage.Ohlc.Builder(other);
  }
  
  /** Creates a new Ohlc RecordBuilder by copying an existing Ohlc instance */
  public static com.phinence.spark.storage.Ohlc.Builder newBuilder(com.phinence.spark.storage.Ohlc other) {
    return new com.phinence.spark.storage.Ohlc.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToWriteOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Ohlc instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Ohlc>
    implements org.apache.avro.data.RecordBuilder<Ohlc> {

    private java.nio.ByteBuffer __g__dirty;
    private float Open;
    private float High;
    private float Low;
    private float Close;
    private long Volume;

    /** Creates a new Builder */
    private Builder() {
      super(com.phinence.spark.storage.Ohlc.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.phinence.spark.storage.Ohlc.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Ohlc instance */
    private Builder(com.phinence.spark.storage.Ohlc other) {
            super(com.phinence.spark.storage.Ohlc.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Open)) {
        this.Open = (java.lang.Float) data().deepCopy(fields()[1].schema(), other.Open);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.High)) {
        this.High = (java.lang.Float) data().deepCopy(fields()[2].schema(), other.High);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Low)) {
        this.Low = (java.lang.Float) data().deepCopy(fields()[3].schema(), other.Low);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Close)) {
        this.Close = (java.lang.Float) data().deepCopy(fields()[4].schema(), other.Close);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Volume)) {
        this.Volume = (java.lang.Long) data().deepCopy(fields()[5].schema(), other.Volume);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'Open' field */
    public java.lang.Float getOpen() {
      return Open;
    }
    
    /** Sets the value of the 'Open' field */
    public com.phinence.spark.storage.Ohlc.Builder setOpen(float value) {
      validate(fields()[1], value);
      this.Open = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Open' field has been set */
    public boolean hasOpen() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Open' field */
    public com.phinence.spark.storage.Ohlc.Builder clearOpen() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'High' field */
    public java.lang.Float getHigh() {
      return High;
    }
    
    /** Sets the value of the 'High' field */
    public com.phinence.spark.storage.Ohlc.Builder setHigh(float value) {
      validate(fields()[2], value);
      this.High = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'High' field has been set */
    public boolean hasHigh() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'High' field */
    public com.phinence.spark.storage.Ohlc.Builder clearHigh() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'Low' field */
    public java.lang.Float getLow() {
      return Low;
    }
    
    /** Sets the value of the 'Low' field */
    public com.phinence.spark.storage.Ohlc.Builder setLow(float value) {
      validate(fields()[3], value);
      this.Low = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'Low' field has been set */
    public boolean hasLow() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'Low' field */
    public com.phinence.spark.storage.Ohlc.Builder clearLow() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'Close' field */
    public java.lang.Float getClose() {
      return Close;
    }
    
    /** Sets the value of the 'Close' field */
    public com.phinence.spark.storage.Ohlc.Builder setClose(float value) {
      validate(fields()[4], value);
      this.Close = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'Close' field has been set */
    public boolean hasClose() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'Close' field */
    public com.phinence.spark.storage.Ohlc.Builder clearClose() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'Volume' field */
    public java.lang.Long getVolume() {
      return Volume;
    }
    
    /** Sets the value of the 'Volume' field */
    public com.phinence.spark.storage.Ohlc.Builder setVolume(long value) {
      validate(fields()[5], value);
      this.Volume = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'Volume' field has been set */
    public boolean hasVolume() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'Volume' field */
    public com.phinence.spark.storage.Ohlc.Builder clearVolume() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    @Override
    public Ohlc build() {
      try {
        Ohlc record = new Ohlc();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[1]);
        record.Open = fieldSetFlags()[1] ? this.Open : (java.lang.Float) defaultValue(fields()[1]);
        record.High = fieldSetFlags()[2] ? this.High : (java.lang.Float) defaultValue(fields()[2]);
        record.Low = fieldSetFlags()[3] ? this.Low : (java.lang.Float) defaultValue(fields()[3]);
        record.Close = fieldSetFlags()[4] ? this.Close : (java.lang.Float) defaultValue(fields()[4]);
        record.Volume = fieldSetFlags()[5] ? this.Volume : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Ohlc.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Ohlc newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Ohlc implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'Open' field.
		   */
	  public java.lang.Float getOpen() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'Open' field.
		   * @param value the value to set.
	   */
	  public void setOpen(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'Open' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOpenDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'High' field.
		   */
	  public java.lang.Float getHigh() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'High' field.
		   * @param value the value to set.
	   */
	  public void setHigh(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'High' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHighDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'Low' field.
		   */
	  public java.lang.Float getLow() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'Low' field.
		   * @param value the value to set.
	   */
	  public void setLow(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'Low' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLowDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'Close' field.
		   */
	  public java.lang.Float getClose() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'Close' field.
		   * @param value the value to set.
	   */
	  public void setClose(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'Close' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCloseDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'Volume' field.
		   */
	  public java.lang.Long getVolume() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'Volume' field.
		   * @param value the value to set.
	   */
	  public void setVolume(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'Volume' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isVolumeDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}